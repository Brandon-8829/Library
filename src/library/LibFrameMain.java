/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.Arrays;
import java.util.Set;


/**
 *
 * @author Brand
 */

public class LibFrameMain extends javax.swing.JFrame {

//Object arrays for data.




    /**
     * Creates new form LibFrameMain
     */
    
//Fills JTable with book data.
    private void fillTable(){
       DefaultTableModel model = (DefaultTableModel) libTable.getModel();
       model.setRowCount(0);
       for(int i = 0; i < BookData.size; i++) {
        model.addRow(new Object[] { i,
                BookData.inventory[i].getTitle(), BookData.inventory[i].getAuthor(),
                BookData.inventory[i].getIsbn(), BookData.inventory[i].getGenre(), 
                BookData.inventory[i].isCheckedIn() });
    }     
   
    }
    public LibFrameMain() {
        initComponents();
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        welcomeText = new javax.swing.JLabel();
        logout = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        libTable = new javax.swing.JTable();
        searchFieldTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        searchTitleButton = new javax.swing.JButton();
        dropDownSort = new javax.swing.JComboBox<>();
        sortButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        searchFieldAuthor = new javax.swing.JTextField();
        searchAuthorButton = new javax.swing.JButton();
        searchFieldISBN = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        searchISBNButton = new javax.swing.JButton();
        searchFieldGenre = new javax.swing.JTextField();
        searchGenreButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        balanceText = new javax.swing.JLabel();
        balanceButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        welcomeText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        welcomeText.setText("  Welcome to the Library!");
        welcomeText.setToolTipText("");
        welcomeText.setBorder(new javax.swing.border.MatteBorder(null));
        welcomeText.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        libTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Book Title", "Author", "ISBN", "Genre", "Checked In"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        libTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(libTable);
        if (libTable.getColumnModel().getColumnCount() > 0) {
            libTable.getColumnModel().getColumn(0).setPreferredWidth(2);
            libTable.getColumnModel().getColumn(1).setPreferredWidth(80);
            libTable.getColumnModel().getColumn(2).setPreferredWidth(80);
            libTable.getColumnModel().getColumn(4).setPreferredWidth(60);
            libTable.getColumnModel().getColumn(5).setPreferredWidth(40);
        }

        jLabel2.setText("Search by Title");

        searchTitleButton.setText("Search");
        searchTitleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTitleButtonActionPerformed(evt);
            }
        });

        dropDownSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "Book Title", "Author", "Genre" }));
        dropDownSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropDownSortActionPerformed(evt);
            }
        });

        sortButton.setText("Sort");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel Search");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Search by Author");

        searchAuthorButton.setText("Search");
        searchAuthorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAuthorButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Search by ISBN");

        searchISBNButton.setText("Search");
        searchISBNButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchISBNButtonActionPerformed(evt);
            }
        });

        searchGenreButton.setText("Search");
        searchGenreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchGenreButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Search by Genre");

        balanceText.setText("[User Balance Here]");

        balanceButton.setText("Pay Balance");
        balanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balanceButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Late Fee Balance:");

        jTextArea1.setBackground(new java.awt.Color(240, 240, 240));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("\t\n\t  Welcome to the online public library portal. Here you may pay your\n\t  late fee balance, browse the library and reserve a book if you have\n\t no late fees! Simply double- click on the row that contains your book \n\t\t and we will hold it for you for 24 hours. ");
        jTextArea1.setBorder(null);
        jTextArea1.setCaretColor(new java.awt.Color(240, 240, 240));
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(welcomeText, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2)
                                    .addComponent(searchFieldTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                                    .addComponent(jLabel3)
                                    .addComponent(searchFieldAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                                    .addComponent(searchFieldISBN, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                                    .addComponent(jLabel4)
                                    .addComponent(searchFieldGenre, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                                    .addComponent(jLabel5))
                                .addGap(0, 6, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(searchGenreButton)
                                    .addComponent(searchISBNButton)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(searchTitleButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(searchAuthorButton, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(78, 78, 78))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(78, 78, 78))
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(balanceText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(balanceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(162, 162, 162)
                                .addComponent(dropDownSort, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(sortButton)
                                .addGap(340, 340, 340))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(welcomeText, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(jLabel1)
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(balanceText)
                            .addComponent(balanceButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(logout)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dropDownSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sortButton))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchFieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchTitleButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchFieldAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchAuthorButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchFieldISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchISBNButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchFieldGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchGenreButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton)))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Logs the user out and brings them back to the main screen.
    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
            LibFrameLogin loginFrame = new LibFrameLogin();
            loginFrame.setVisible(true);
            dispose();    
    }//GEN-LAST:event_logoutActionPerformed

    //Searchs the table for requested book.
    private void searchTitleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTitleButtonActionPerformed
        String search = searchFieldTitle.getText();
        boolean searchSuccess = false;
        DefaultTableModel model = (DefaultTableModel) libTable.getModel();
        
        for(int z = 0; z < BookData.size; z++){
            if(BookData.inventory[z].title.contains(search)){
                    model.setRowCount(0);
                    break;
            }
        }

        for(int i = 0; i < BookData.size; i++){
            if(BookData.inventory[i].title.contains(search)){
                searchSuccess = true;        
                model.addRow(new Object[]{ i,
                BookData.inventory[i].getTitle(), BookData.inventory[i].getAuthor(),
                BookData.inventory[i].getIsbn(), BookData.inventory[i].getGenre(), 
                BookData.inventory[i].isCheckedIn()     
                });
            }
        }
        if(searchSuccess == false){
            JOptionPane.showMessageDialog(null, search + " was not found!");
        }
        
    }//GEN-LAST:event_searchTitleButtonActionPerformed

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        // TODO add your handling code here:
                
        DefaultTableModel model = (DefaultTableModel) libTable.getModel();
        String dropDownString = (String)dropDownSort.getSelectedItem();
        model.setRowCount(0);
        
        if(dropDownString.equals("Default")){
            fillTable();
            
        }
        
        else if(dropDownString.equals("Book Title")){
            

        }
            

        
        
        
    }//GEN-LAST:event_sortButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        
        fillTable();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void libTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libTableMouseClicked
                                   
            
     JTable source = (JTable)evt.getSource();
            int row = source.rowAtPoint( evt.getPoint() );
            int column = source.columnAtPoint( evt.getPoint() );
            int bookId = (int)libTable.getModel().getValueAt(row, 0);
            int activeId = UserData.loginId;
            boolean checked = BookData.inventory[bookId].isCheckedIn();
            String name = BookData.inventory[bookId].getTitle();
           
            if(UserData.logins[activeId].getFees() == 0 && 
                    UserData.logins[activeId].reserved == false){
                if(checked == true){
                    Object[] reserveOptions = {"Reserve","No Thanks"};
                    int option = JOptionPane.showOptionDialog(null,
                    "Would you like us to reserve " + "'" + name + "'",
                    "Reserve",JOptionPane.YES_NO_OPTION,0,null,
                    reserveOptions,reserveOptions[1]);
                    
                    if(option == JOptionPane.YES_OPTION){                     
                        BookData.inventory[bookId].setCheckedIn(false);
                        fillTable();
                        UserData.logins[activeId].setReserved(true);
                        JOptionPane.showMessageDialog(null, "'" + name + 
                                "' has been"
                                + " reserved for 24 hours. Make sure to stop in"
                                + " and pick it up!");
                    }


                }
                else{
                        JOptionPane.showMessageDialog(null, "'" + name + "' is " 
                                + "currently checked out!");
                }
            
            }
            else{
                if(UserData.logins[activeId].getFees() > 0){
                        JOptionPane.showMessageDialog(null, "You can't reserve "
                                + "a book while you have a fee balance!");
                }
                else if(UserData.logins[activeId].reserved == true){
                        JOptionPane.showMessageDialog(null, "You've already"
                                + " reserved a book!");
                }
            }

         
    }//GEN-LAST:event_libTableMouseClicked
  

    private void searchAuthorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchAuthorButtonActionPerformed

        boolean searchSuccess = false;
        String search = searchFieldAuthor.getText();
        DefaultTableModel model = (DefaultTableModel) libTable.getModel();
        
        for(int z = 0; z < BookData.size; z++){
            if((BookData.inventory[z].author.contains(search))){
                    model.setRowCount(0);
                    break;
            }
        }

        for(int i = 0; i < BookData.size; i++){
            if((BookData.inventory[i].author.contains(search))){
                searchSuccess = true;
                model.addRow(new Object[]{ i,
                BookData.inventory[i].getTitle(), BookData.inventory[i].getAuthor(),
                BookData.inventory[i].getIsbn(), BookData.inventory[i].getGenre(), 
                BookData.inventory[i].isCheckedIn()     
                });
            }
        }
        if(searchSuccess == false){
            JOptionPane.showMessageDialog(null, search + " was not found!");
        }
    }//GEN-LAST:event_searchAuthorButtonActionPerformed

    private void searchISBNButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchISBNButtonActionPerformed

        boolean searchSuccess = false;
        String search = searchFieldISBN.getText();
        DefaultTableModel model = (DefaultTableModel) libTable.getModel();
        
        for(int z = 0; z < BookData.size; z++){
            if((BookData.inventory[z].isbn.contains(search))){
                    model.setRowCount(0);
                    break;
            }
        }

        for(int i = 0; i < BookData.size; i++){
            if((BookData.inventory[i].isbn.contains(search))){
                searchSuccess = true;     
                model.addRow(new Object[]{ i,
                BookData.inventory[i].getTitle(), BookData.inventory[i].getAuthor(),
                BookData.inventory[i].getIsbn(), BookData.inventory[i].getGenre(), 
                BookData.inventory[i].isCheckedIn()     
                });
            }
        }
        if(searchSuccess == false){
            JOptionPane.showMessageDialog(null, search + " was not found!");
        }
    }//GEN-LAST:event_searchISBNButtonActionPerformed

    private void searchGenreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchGenreButtonActionPerformed

        boolean searchSuccess = false;
        String search = searchFieldGenre.getText();
        DefaultTableModel model = (DefaultTableModel) libTable.getModel();
        
        for(int z = 0; z < BookData.size; z++){
            if((BookData.inventory[z].genre.contains(search))){
                    model.setRowCount(0);
                    break;
            }
        }

        for(int i = 0; i < BookData.size; i++){
            if((BookData.inventory[i].genre.contains(search))){
                searchSuccess = true;
                model.addRow(new Object[]{ i,
                BookData.inventory[i].getTitle(), BookData.inventory[i].getAuthor(),
                BookData.inventory[i].getIsbn(), BookData.inventory[i].getGenre(), 
                BookData.inventory[i].isCheckedIn()     
                });
            }
        }
        if(searchSuccess == false){
            JOptionPane.showMessageDialog(null, search + " was not found!");
        }
    }//GEN-LAST:event_searchGenreButtonActionPerformed

    //Initializes data when the window is opened.
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //generateBooks(BookData.inventory);
        int activeId = UserData.loginId;
        double balance = UserData.logins[activeId].getFees();
        String lateBalance = Double.toString(balance);
        balanceText.setText(lateBalance);

        fillTable();        
    }//GEN-LAST:event_formWindowOpened

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated


    }//GEN-LAST:event_formWindowActivated

    //Takes in a payment amount and reduces late fee balance.
    private void balanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_balanceButtonActionPerformed
      int activeId = UserData.loginId;
      String ans = JOptionPane.showInputDialog(null, "Enter Payment Amount: ");
      double payment = Double.valueOf(ans);
      if (payment <= 0){
          JOptionPane.showMessageDialog(null,"Invalid payment amount!");
      }
      else if(payment > UserData.logins[activeId].fees){
            UserData.logins[activeId].fees = 0;
           JOptionPane.showMessageDialog(null,"Request payment higher than "
                   + "balance! Only the amount of the balance was charged to "
                   + "your card.");         
      }
      else{
            UserData.logins[activeId].fees = UserData.logins[activeId].fees - payment;
            JOptionPane.showMessageDialog(null,"Payment Complete!");
      }
      
        double balance = UserData.logins[activeId].getFees();
        String lateBalance = Double.toString(balance);
        balanceText.setText(lateBalance);
    }//GEN-LAST:event_balanceButtonActionPerformed

    private void dropDownSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropDownSortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dropDownSortActionPerformed

     /* @param args the command line arguments */
    public static void main(String args[]) {

       
     

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LibFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LibFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LibFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new LibFrameMain().setVisible(true);

                
            }
        });
        

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton balanceButton;
    private javax.swing.JLabel balanceText;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox<String> dropDownSort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private static javax.swing.JTable libTable;
    private javax.swing.JButton logout;
    private javax.swing.JButton searchAuthorButton;
    private javax.swing.JTextField searchFieldAuthor;
    private javax.swing.JTextField searchFieldGenre;
    private javax.swing.JTextField searchFieldISBN;
    private javax.swing.JTextField searchFieldTitle;
    private javax.swing.JButton searchGenreButton;
    private javax.swing.JButton searchISBNButton;
    private javax.swing.JButton searchTitleButton;
    private javax.swing.JButton sortButton;
    private javax.swing.JLabel welcomeText;
    // End of variables declaration//GEN-END:variables
}
